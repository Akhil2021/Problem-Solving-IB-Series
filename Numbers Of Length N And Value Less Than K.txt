public class Solution {
    public int fun(int[] A,int n,int idx,int B,int C,boolean flag)
    {
        if(idx==B)
            return 1;
        if(flag)
            return (int)Math.pow(n,B-idx);
        int digit = B-idx;
        int pow = (int)Math.pow(10,digit-1);
        int v = C/pow;
        v = v%10;
        int less=0;
        boolean isPresent=false;
        for(int i=0;i<n;i++)
        {
            if(A[i]==0)
                isPresent=true;
            if(A[i]<v)
                less++;
            else
                break;
        }
        int count=0;
        if(digit==B&&isPresent&&B>1)
            count = (less-1)*fun(A,n,idx+1,B,C,true);
        else
            count = less*fun(A,n,idx+1,B,C,true);
        boolean isEqual = false;
        for(int i=0;i<n;i++)
            if(A[i]==v)
                isEqual = true;
        if(isEqual&&digit!=1)
            count+=fun(A,n,idx+1,B,C,false);
        return count;
    }
    public int solve(int[] A, int B, int C) {
        int lenC = (int)(Math.log10(C))+1;
        if(B>lenC)
            return 0;
        else if(B<lenC)
        {
            int n = A.length;
            boolean isPresent = false;
            for(int i=0;i<n;i++)
                if(A[i]==0)
                    isPresent = true;
            if(isPresent&&B!=1)
                return (n-1)*((int)Math.pow(n,B-1));
            else
                return (int)Math.pow(n,B);
        }
        else
        {
            Arrays.sort(A);
            
            return fun(A,A.length,0,B,C,false);
        }
    }
}
