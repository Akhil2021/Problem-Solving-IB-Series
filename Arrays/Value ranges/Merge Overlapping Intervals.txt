/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
 class pair{
     int x,y;
     pair(int x,int y)
     {
         this.x = x;
         this.y = y;
     }
 }
 class pairsort implements Comparator<pair>{
     public int compare(pair p1,pair p2)
     {
         if(p1.x<p2.x)
            return -1;
        else if(p1.x>p2.x)
            return 1;
        else if(p1.y<p2.y)
            return -1;
        return 1;
     }
 }
public class Solution {
    public ArrayList<Interval> merge(ArrayList<Interval> intervals) {
    ArrayList<pair> a = new ArrayList<pair>();
    int n = intervals.size();
    for(int i=0;i<n;i++)
        a.add(new pair(intervals.get(i).start,0));
    for(int i=0;i<n;i++)
        a.add(new pair(intervals.get(i).end,1));
    Collections.sort(a,new pairsort());
    ArrayList<Interval> merged = new ArrayList<Interval>();
    int count = 0;
    Interval I = new Interval();
    for(int i=0;i<2*n;i++)
    {
        if(count==0)
        {
            I.start = a.get(i).x;
            count++;
        }
        else
        {
            if(a.get(i).y==1)
                count--;
            else
                count++;
            if(count==0)
            {
                I.end = a.get(i).x;
                merged.add(I);
                I = new Interval();
            }
        }
    }
    return merged;
    
    }
}
